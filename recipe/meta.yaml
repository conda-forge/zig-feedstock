{% set name = "zig" %}
{% set version = "0.15.1" %}
{% set llvm_version = "20" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://github.com/ziglang/zig/archive/refs/tags/{{ version }}.tar.gz
    sha256: f7d587087e551a206ad2e1c1a10e8124f5ecaec1f1efc69b0de6df89af80245c
    patches:
      - patches/0001-x86-maxrss-CMakeLists.txt.patch
      - patches/0001-cross-findllvm.patch  # [linux and (aarch64 or ppc64le)]
      - patches/0002-cross-CMakeLists.txt.patch  # [linux and (aarch64 or ppc64le)]
      - patches/0003-cross-install.cmake.patch  # [linux and (aarch64 or ppc64le)]
      # May be combined into a single patch once the build is found robust (few versions of zig)
      - patches/0001-win-deprecations.patch  # [win]
      - patches/0002-win-libraries-CMakeLists.txt.patch  # [win]
      - patches/0003-win-add-libdir-build.zig.patch  # [win]
      - patches/0004-win-remove-ucrt-Lld.zig.patch  # [win]
    folder: zig-source

  # We may need to use the upstream binary dist if conda ZIG cannot build a newer version
  # The zig variable in the build scripts would then need to be updated
  #
  # - folder: zig-bootstrap
  #   url: https://ziglang.org/download/{{ version }}/zig-windows-x86_64-{{ version }}.zip  # [win]
  #   sha256: f53e5f9011ba20bbc3e0e6d0a9441b31eb227a97bac0e7d24172f1b8b27b4371  # [win]
  #   url: https://ziglang.org/download/{{ version }}/zig-macos-x86_64-{{ version }}.tar.xz  # [osx]
  #   sha256: 685816166f21f0b8d6fc7aa6a36e91396dcd82ca6556dfbe3e329deffc01fec3  # [osx]
  #   url: https://ziglang.org/download/{{ version }}/zig-linux-x86_64-{{ version }}.tar.xz  # [linux]
  #   sha256: 473ec26806133cf4d1918caf1a410f8403a13d979726a9045b421b685031a982  # [linux]

build:
  number: 2
  skip: true  # [not ppc64le]
  script_env:
    - BUILD_WITH_CMAKE=1  # [x86_64 or (linux and (aarch64 or ppc64le))]
  ignore_run_exports:
    - __glibc  # [(linux and (aarch64 or ppc64le))]
    - ucrt  # [win]
    - vc14_runtime  # [win]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ c_stdlib }}_{{ build_platform }} >={{ c_stdlib_version }}  # [linux and (aarch64 or ppc64le)]
    - {{ stdlib("c") }}
    - cmake >=3.5
    - libxml2-devel  # [(build_platform != target_platform) and osx]
    - ninja
    - sed  # [unix]
  host:
    - {{ compiler('cxx') }}  # [linux and (aarch64 or ppc64le)]
    - clangdev {{ llvm_version }}
    - libclang-cpp {{ llvm_version }}
    - libcxx {{ llvm_version }}  # [osx]
    - libxml2-devel
    - llvmdev {{ llvm_version }}
    - llvm {{ llvm_version }}
    - lld {{ llvm_version }}
    - mamba  # [win]
    - sysroot_{{ target_platform }} >=2.28  # [linux and (aarch64 or ppc64le)]
    - zlib
    - zstd
  run:
    - sysroot_{{ target_platform }} >=2.28  # [linux and (aarch64 or ppc64le)]

test:
  requires:
    - patchelf  # [linux and aarch64]
    - sysroot_{{ target_platform }} >=2.28  # [linux and (aarch64 or ppc64le)]
  commands:
    - test -f ${PREFIX}/bin/zig  # [unix]
    - test -f ${PREFIX}/lib/zig/c.zig  # [unix]
    - test -f ${PREFIX}/lib/zig/compiler_rt.zig  # [unix]
    - test -f ${PREFIX}/lib/zig/zig.h  # [unix]
    - if not exist %PREFIX%\\bin\\zig.exe exit 1  # [win]
    - if not exist %PREFIX%\\lib\\zig\\c.zig exit 1  # [win]
    - if not exist %PREFIX%\\lib\\zig\\compiler_rt.zig exit 1  # [win]
    - if not exist %PREFIX%\\lib\\zig\\zig.h exit 1  # [win]
    {% set lib_dirs = [
      "compiler", "compiler_rt", "docs", "include", "init", "libc",
      "libcxx", "libcxxabi", "libunwind", "std"
    ] %}
    {% for lib_dir in lib_dirs %}
    - test -d ${PREFIX}/lib/zig/{{ lib_dir }}  # [not (osx and arm64 or win)]
    - if not exist %PREFIX%\\lib\\zig\\{{ lib_dir }} exit 1  # [win]
    {% endfor %}

    # Functionality tests
    - readelf -l ${PREFIX}/bin/zig  # [linux and (aarch64 or ppc64le)]
    - patchelf --set-interpreter ${PREFIX}/aarch64-conda-linux-gnu/sysroot/lib64/ld-linux-aarch64.so.1 ${PREFIX}/bin/zig  # [linux and (aarch64)]
    - zig version
    - zig zen
    - zig init
    - zig test zig-source/test/behavior.zig  # [not win]
    # One test fails on windows: 838/1932 behavior.floatop.test.@log2 with vectors...FAIL (TestUnexpectedResult)
    - zig test zig-source/test/behavior.zig || true  # [win]
  source_files:
    - zig-source/test

about:
  home: https://ziglang.org/
  license: MIT
  license_family: MIT
  license_file: zig-source/LICENSE
  summary: Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.
  description: |
    Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.
    Robust: Behavior is correct even for edge cases such as out of memory.
    Optimal: Write programs the best way they can behave and perform.
    Reusable: The same code works in many environments which have different constraints.
    Maintainable: Precisely communicate intent to the compiler and other programmers. 
      The language imposes a low overhead to reading code and is resilient to changing requirements and environments.
  doc_url: https://ziglang.org/documentation/{{ version }}/
  dev_url: https://github.com/ziglang/zig

extra:
  recipe-maintainers:
    - MementoRC
    - xmnlab
