{% set name = "zig" %}
{% set version = "0.13.0" %}
{% set llvm_version = "18" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://github.com/ziglang/zig/archive/refs/tags/{{ version }}.tar.gz
    sha256: d3912858003e340f315224bf177d0f441d86b81f62854f5c141b6d51ab6b5516
    patches:
      - patches/0001-cross-findllvm.patch  # [linux and aarch64]
    folder: zig-source

build:
  number: 0
  skip: true  # [not linux and not (osx and x86_64)]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ stdlib("c") }}
    - cmake >=3.5
    - ninja
  host:
    - clangdev {{ llvm_version }}.*
    - llvmdev {{ llvm_version }}.*
    - llvm {{ llvm_version }}.*
    - lld {{ llvm_version }}.*
    - libclang-cpp {{ llvm_version }}.*
    - zlib
    - zstd

test:
  commands:
    - test -f ${PREFIX}/bin/zig  # [unix]
    - test -f ${PREFIX}/doc/langref.html  # [unix]
    - test -f ${PREFIX}/lib/zig/c.zig  # [unix]
    - test -f ${PREFIX}/lib/zig/compiler_rt.zig  # [unix]
    - test -f ${PREFIX}/lib/zig/zig.h  # [unix]
    - if not exist %PREFIX%\\bin\\zig.exe exit 1  # [win]
    - if not exist %PREFIX%\\doc\\langref.html exit 1  # [win]
    - if not exist %PREFIX%\\lib\\zig\\c.zig exit 1  # [win]
    - if not exist %PREFIX%\\lib\\zig\\compiler_rt.zig exit 1  # [win]
    - if not exist %PREFIX%\\lib\\zig\\zig.h exit 1  # [win]
    {% set lib_dirs = [
      "compiler", "compiler_rt", "docs", "include", "init", "libc",
      "libcxx", "libcxxabi", "libunwind", "std", "tsan"
    ] %}
    {% for lib_dir in lib_dirs %}
    - test -d ${PREFIX}/lib/zig/{{ lib_dir }}  # [not (osx and arm64 or win)]
    - if not exist %PREFIX%\\lib\\zig\\{{ lib_dir }} exit 1  # [win]
    {% endfor %}

    # Functionality tests
    - zig version
    - zig zen
    - zig init
    - zig test zig-source/test/behavior.zig
  source_files:
    - zig-source/test

about:
  home: https://ziglang.org/
  license: MIT
  license_family: MIT
  license_file: zig-source/LICENSE
  summary: Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.
  description: |
    Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.
    Robust: Behavior is correct even for edge cases such as out of memory.
    Optimal: Write programs the best way they can behave and perform.
    Reusable: The same code works in many environments which have different constraints.
    Maintainable: Precisely communicate intent to the compiler and other programmers. 
      The language imposes a low overhead to reading code and is resilient to changing requirements and environments.
  doc_url: https://ziglang.org/documentation/{{ version }}/
  dev_url: https://github.com/ziglang/zig

extra:
  recipe-maintainers:
    - MementoRC
    - xmnlab
